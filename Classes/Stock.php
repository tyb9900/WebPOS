<?php
require_once ("Connection.php");
require_once ("CRUD.php");

class Stock extends Connection implements CRUD
{
    private  $article;
    private  $quantity;
    private $TABLE;

    public function __construct()
    {
        parent::__construct();
        $this->TABLE = "stock";
    }

    /**
     * @return mixed
     */
    public function getArticle()
    {
        return $this->article;
    }

    /**
     * @param mixed $article
     */
    public function setArticle($article)
    {
        $this->article = $article;
    }

    /**
     * @return mixed
     */
    public function getQuantity()
    {
        return $this->quantity;
    }

    /**
     * @param mixed $quantity
     */
    public function setQuantity($quantity)
    {
        $this->quantity = $quantity;
    }

    function insert()
    {
        // TODO: Implement insert() method.
        $prev = $this->retrieve();
        if($prev->rowCount()>0)
        {
            $prev = $prev->fetchAll();
            $prevPairs = $prev[0]["Pairs"];
            $this->quantity+=$prevPairs;
            $this->update();
        }
        else{
            $query  = "INSERT INTO $this->TABLE (Article,Pairs) VALUES(?,?)";
            $prepared = $this->prepareQuery($query);
            $param = [$this->article,$this->quantity];
            $this->executeQuery($prepared,$param);
        }
    }

    function update()
    {
        // TODO: Implement update() method.

        $query = "UPDATE $this->TABLE SET PAIRS=? WHERE ARTICLE=?";
        $prepared = $this->prepareQuery($query);
        $param = [$this->quantity,$this->article];
        $this->executeQuery($prepared,$param);
    }

    function delete()
    {
        // TODO: Implement delete() method.

        $query = "DELETE FROM $this->TABLE WHERE Article=?";
        $prepared = $this->prepareQuery($query);
        $param = [$this->article];
        $this->executeQuery($prepared,$param);
    }

    function retrieve()
    {
        // TODO: Implement retrieve() method.

        $query = "SELECT $this->TABLE.Article,(SELECT categories.Name FROM categories,articles WHERE categories.id=articles.Category AND articles.Article=stock.Article) AS Category, stock.Pairs,(SELECT articles.Price FROM articles WHERE stock.Article=articles.Article)AS Price,(stock.Pairs * (SELECT articles.Price FROM articles WHERE stock.Article=articles.Article)) AS Amount from stock WHERE Article=?";
        $prepared = $this->prepareQuery($query);
        $param = [$this->article];
        $this->executeQuery($prepared,$param);
        return $prepared;
    }

    function retriveAll()
    {
        // TODO: Implement retriveAll() method.

        $query = "SELECT $this->TABLE.Article,(SELECT categories.Name FROM categories,articles WHERE categories.id=articles.Category AND articles.Article=stock.Article) AS Category, stock.Pairs,(SELECT articles.Price FROM articles WHERE stock.Article=articles.Article)AS Price,(stock.Pairs * (SELECT articles.Price FROM articles WHERE stock.Article=articles.Article)) AS Amount from stock";
        $prepared = $this->prepareQuery($query);
        $this->executeQuery($prepared,null);
        return $prepared;
    }

    public function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }

}