<?php
require_once ("Connection.php");
require_once ("CRUD.php");

class Article extends Connection implements CRUD
{
    private $article;
    private $price;
    private $category;
    private $TABLE;

    public function __construct()
    {
        parent::__construct();
        $this->TABLE = "articles";
    }

    /**
     * @return mixed
     */
    public function getArticle()
    {
        return $this->article;
    }

    /**
     * @param mixed $article
     */
    public function setArticle($article)
    {
        $this->article = $article;
    }

    /**
     * @return mixed
     */
    public function getPrice()
    {
        return $this->price;
    }

    /**
     * @param mixed $price
     */
    public function setPrice($price)
    {
        $this->price = $price;
    }

    /**
     * @return mixed
     */
    public function getCategory()
    {
        return $this->category;
    }

    /**
     * @param mixed $category
     */
    public function setCategory($category)
    {
        $this->category = $category;
    }

    function insert()
    {
        // TODO: Implement insert() method.

        $query  = "INSERT INTO $this->TABLE (Article,Price,Category) VALUES(?,?,?)";
        $prepared = $this->prepareQuery($query);
        $param = [$this->article,$this->price,$this->category];
        $this->executeQuery($prepared,$param);
    }

    function update()
    {
        // TODO: Implement update() method.

        $query = "UPDATE $this->TABLE SET Article=?, Price=?, Category=? WHERE Article=?";
        $prepared = $this->prepareQuery($query);
        $param = [$this->article,$this->price,$this->category,$this->article];
        $this->executeQuery($prepared,$param);
    }

    function delete()
    {
        // TODO: Implement delete() method.
        $query = "DELETE FROM $this->TABLE WHERE Article=?";
        $prepared = $this->prepareQuery($query);
        $param = [$this->article];
        $this->executeQuery($prepared,$param);
    }

    function retrieve()
    {
        // TODO: Implement retrieve() method.
        $query = "SELECT *FROM $this->TABLE WHERE Article=?";
        $prepared = $this->prepareQuery($query);
        $param = [$this->article];
        $this->executeQuery($prepared,$param);
        return $prepared;

    }

    function retriveAll()
    {
        // TODO: Implement retriveAll() method.
        $query = "SELECT Article,Price,(SELECT categories.Name from categories where categories.id=articles.Category) AS Category FROM articles";
        $prepared = $this->prepareQuery($query);
        $this->executeQuery($prepared,null);
        return $prepared;
    }
    public function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }
}