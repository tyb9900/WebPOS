<?php
require ("Connection.php");
require ("CRUD.php");

class Category extends Connection implements CRUD
{
 private $id;
 private $name;
 private $TABLE;

 public function __construct()
 {
     parent::__construct();
     $this->TABLE = "CATEGORIES";

 }

    /**
     * @return mixed
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @param mixed $id
     */
    public function setId($id)
    {
        $this->id = $id;
    }

    /**
     * @return mixed
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * @param mixed $name
     */
    public function setName($name)
    {
        $this->name = $name;
    }

    function insert()
    {
        // TODO: Implement insert() method.

        $query  = "INSERT INTO $this->TABLE (id,Name) VALUES(?,?)";
        $prepared = $this->prepareQuery($query);
        $param = [$this->id,$this->name];
        $this->executeQuery($prepared,$param);
    }

    function update()
    {
        // TODO: Implement update() method.

        $query = "UPDATE $this->TABLE SET NAME=? WHERE ID=?";
        $prepared = $this->prepareQuery($query);
        $param = [$this->name,$this->id];
        $this->executeQuery($prepared,$param);
    }

    function delete()
    {
        // TODO: Implement delete() method.
        $query = "DELETE FROM $this->TABLE WHERE ID=?";
        $prepared = $this->prepareQuery($query);
        $param = [$this->id];
        $this->executeQuery($prepared,$param);
    }

    function retrieve()
    {
        // TODO: Implement retrieve() method.
        $query = "SELECT *FROM $this->TABLE WHERE ID=?";
        $prepared = $this->prepareQuery($query);
        $param = [$this->id];
        $this->executeQuery($prepared,$param);
        return $prepared;
    }

    function retriveAll()
    {
        // TODO: Implement retriveAll() method.
        $query = "SELECT *FROM $this->TABLE";
        $prepared = $this->prepareQuery($query);
        $this->executeQuery($prepared,null);
        return $prepared;
    }
    public function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }
}